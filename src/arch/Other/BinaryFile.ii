#ifndef _BinaryFile_ii_
#define _BinaryFile_ii_
//
// File:        BinaryFile.ii
// Desc:        
//
//  	inlines for BinaryFile
//
// Author:      Paul Houghton - (paul_houghton@wiltel.com)
// Created:     08/01/95 06:48
//
// Revision History:
//
// $Log$
// Revision 3.1  1996/11/14 01:25:17  houghton
// Changed to Release 3
//
// Revision 2.1  1995/11/10 12:47:05  houghton
// Change to Version 2
//
// Revision 1.1  1995/11/05  13:11:28  houghton
// Major rework
//
//

inline
void
BinaryFile::close( void )
{
  if( is_open() )
    ::close( fd );
  fd = -1;
  state = ios::badbit;
}

inline
bool
BinaryFile::is_open( void ) const
{
  return( fd >= 0 );
}

inline
streampos
BinaryFile::seekoff( streamoff offset, ios::seek_dir dir )
{
  return( seek( dir, offset ) );
}

inline
streampos
BinaryFile::seekpos( streampos pos )
{
  return( seek( ios::beg, pos ) );
}

inline
streampos
BinaryFile::seek( long pos )
{
  return( seek( ios::beg, pos ) );
}

inline
streampos
BinaryFile::seek( ios::seek_dir	dir, streamoff offset )
{
  return( lseek( fd, offset, whence( dir ) ) );
}

inline
streampos
BinaryFile::tell( void ) const
{
  return( lseek( fd, 0, whence( ios::cur ) ) );
}

inline
int
BinaryFile::sync( void )
{
  return( fsync( fd ) ? EOF : 0 );
}

inline
const FilePath &
BinaryFile::getFileName( void ) const
{
  return( fileName );
}

inline
int
BinaryFile::rdstate( void ) const
{
  return( state );
}

inline
void
BinaryFile::clear( int stateFlags )
{
  state = stateFlags;
}

inline
bool
BinaryFile::eof( void ) const
{
  return( state & ios::eofbit );
}

inline
bool
BinaryFile::bad( void ) const
{
  return( state & ios::badbit );
}

inline
bool
BinaryFile::fail( void ) const
{
  return( state & (ios::failbit | ios::badbit) );
}

inline
bool
BinaryFile::operator ! ( void ) const
{
  return( fail() );
}

inline
bool
BinaryFile::good( void ) const
{
  return( state == ios::goodbit );
}

inline
BinaryFile::BinaryFile( void )
{
  fd = 0;
  state = ios::badbit;
  osError = ENOENT;
}

inline
BinaryFile::BinaryFile(
  const char *      fn,
  ios::open_mode    mode,
  int   	    perm
  )
{
  open( fn, mode, perm );
}

inline
int
BinaryFile::whence( ios::seek_dir dir ) const
{
  return( dir == ios::beg ? SEEK_SET :
	  dir == ios::cur ? SEEK_CUR : SEEK_END );
}


// iBinaryFile 

inline
iBinaryFile::iBinaryFile( void )
{
  bytesRead = 0;
}

inline
iBinaryFile::iBinaryFile( const char * fileName )
  : BinaryFile( fileName, ios::in )
{
  bytesRead = 0;
}

inline
iBinaryFile &
iBinaryFile::read( streampos pos, void * dest, size_t amount )
{
  seek( pos );
  return( read( dest, amount ) );
}

inline
iBinaryFile &
iBinaryFile::read(
  streamoff     offset,
  ios::seek_dir	dir,
  void * 	dest,
  size_t	amount
  )
{
  seek( dir, offset );
  return( read( dest, amount ) );
}

inline
int
iBinaryFile::gcount( void )
{
  return( bytesRead );
}

inline
oBinaryFile::oBinaryFile( void )
{
  ;
}

inline
oBinaryFile::oBinaryFile(
  const char * 	    fileName,
  ios::open_mode    mode,
  int	    	    perm
  )
  : BinaryFile( fileName, mode, perm )
{
  ;
}

inline
oBinaryFile &
oBinaryFile::write( streampos pos, const void * src, size_t amount )
{
  seek( pos );
  return( write( src, amount ) );
}

inline
oBinaryFile &
oBinaryFile::write(
  streamoff     offset,
  ios::seek_dir	dir,
  const void * 	src,
  size_t	amount
  )
{
  seek( dir, offset );
  return( write( src, amount ) );
}

inline
ioBinaryFile::ioBinaryFile(
  const char * 	    fileName,
  ios::open_mode    mode,
  int	    	    perm
  )
  : BinaryFile( fileName, mode, perm )
{
  ;
}


#endif // ! def _BinaryFile_ii_ 
