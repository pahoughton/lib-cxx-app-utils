#ifndef _UserGroup_ii_
#define _UserGroup_ii_
//
// File:        UserGroup.ii
// Project:	StlUtils ()
// Desc:        
//
//  	inlines for User
//
// Author:      Paul Houghton - (paul_houghton@wiltel.com)
// Created:     07/17/95 20:06
//
// Revision History: (See end of file for Revision Log)
//
//  $Author$ 
//  $Date$ 
//  $Name$ 
//  $Revision$ 
//  $State$ 
//
// $Id$ 

#include <User.hh>
#include <Compare.hh>
#include <climits>
#include <cerrno>
#include <pwd.h>

#if defined( STLUTILS_DEBUG )
#define inline
#endif

inline
UserGroup::UserGroup( bool findMemb )
{
  gid = bad;
  osError = 0;
  set( getgid(), findMemb );
}

inline
UserGroup::UserGroup( gid_t group, bool findMemb )
{
  gid = bad;
  osError = 0;
  set( group, findMemb );
}

inline
UserGroup::UserGroup( const char * groupName, bool findMemb )
{
  gid = bad;
  osError = 0;
  set( groupName, findMemb );
}

inline
UserGroup::UserGroup( const struct group * groupEntry, bool findMemb )
{
  gid = bad;
  osError = 0;
  set( groupEntry, findMemb );
}
inline
UserGroup::UserGroup( istream & src, bool text, bool findMemb )
{
  if( text )
    {
      char gname[ 50 ];
      src >> gname;
      set( gname, findMemb );
    }
  else
    {
      read( src );
      if( findMemb )
	findMembers();
    }
}

inline
gid_t
UserGroup::getGID( void ) const
{
  return( gid );
}

inline
const char *
UserGroup::getName( void ) const
{
  return( name );
}

inline
const UserGroup::Members &
UserGroup::getMembers( void ) const
{
  return( members );
}

inline
bool
UserGroup::isMember( uid_t  user )
{
  struct passwd * pw = getpwuid( user );

  if( members.size() == 0 )
    findMembers();
  
  return( pw ? members.find( pw->pw_name ) != members.end() : false );
}

inline
bool
UserGroup::isMember( uid_t  user ) const
{
  struct passwd * pw = getpwuid( user );

  if( members.size() == 0 )
    return( false );
  
  // STUPID - end() first or sun cc 5.0 wines
  return( pw ? members.end() != members.find( pw->pw_name ) : false );
}

inline
bool
UserGroup::isMember( const char * user )
{
  if( members.size() == 0 )
    findMembers();
  
  return( members.find( user ) != members.end() );
}

inline
bool
UserGroup::isMember( const char * user ) const
{
  if( members.size() == 0 )
    return( false );
  
  return( members.end() != members.find( user ) );
}

inline
bool
UserGroup::set( gid_t group, bool findMemb )
{
  return( set( getgrgid( group ), findMemb ) );
}

inline
bool
UserGroup::set( const char * groupName, bool findMemb )
{
  return( set( getgrnam( groupName ), findMemb ) );
}

inline
int
UserGroup::compare( const UserGroup & two ) const
{
  return( ::compare( name, two.name ) );
}

inline
bool
UserGroup::operator == ( const UserGroup & two ) const
{
  return( compare( two ) == 0 );
}

inline
bool
UserGroup::operator <  ( const UserGroup & two ) const
{
  return( compare( two ) < 0 );
}

#if defined( STLUTILS_RELOPS_BROKEN )
inline
bool
UserGroup::operator != ( const UserGroup & rhs ) const
{
  return( ! (*this == rhs) );
}

inline
bool
UserGroup::operator > ( const UserGroup & rhs ) const
{
  return( rhs < *this );
}

inline
bool
UserGroup::operator <= ( const UserGroup & rhs ) const
{
  return( ! (rhs < *this) );
}

inline
bool
UserGroup::operator >= ( const UserGroup & rhs ) const
{
  return( ! (*this < rhs) );
}
#endif 

inline
UserGroup::operator const char * ( void ) const
{
  return( name );
}

inline
UserGroup::operator gid_t ( void ) const
{
  return( gid );
}

inline
int
compare( const UserGroup & one, const UserGroup & two )
{
  return( one.compare( two ) );
}
	  
inline
ostream &
operator <<( ostream & dest, const UserGroup & obj )
{
  return( obj.toStream( dest ) );
}

// Revision Log:
//
// 
// %PL%
// 
// $Log$
// Revision 6.1  2003/08/09 11:22:47  houghton
// Changed to version 6
//
// Revision 5.4  2003/08/09 11:21:01  houghton
// Changed ver strings.
//
// Revision 5.3  2001/07/26 19:28:57  houghton
// *** empty log message ***
//
// Revision 5.2  2000/05/25 17:07:31  houghton
// Port: Sun CC 5.0.
//
// Revision 5.1  2000/05/25 10:33:23  houghton
// Changed Version Num to 5
//
// Revision 4.1  1997/09/17 15:13:41  houghton
// Changed to Version 4
//
// Revision 3.2  1997/09/17 11:09:29  houghton
// Changed: renamed library to StlUtils.
//
// Revision 3.1  1996/11/14 01:25:12  houghton
// Changed to Release 3
//
// Revision 2.4  1996/11/06 18:13:09  houghton
// Changed use of Str to RWCString.
//     (as required per Mike Alexander)
//
// Revision 2.3  1995/12/31 11:24:53  houghton
// Bug Fix - header defines were wrong.
//
// Revision 2.2  1995/12/04 11:20:22  houghton
// Bug Fix - Can now compile with out '-DSTLUTILS_DEBUG'.
//
// Revision 2.1  1995/11/10  12:46:59  houghton
// Change to Version 2
//
// Revision 1.3  1995/11/05  15:49:19  houghton
// Revised
//
//
#endif // ! def _UserGroup_ii_ 
