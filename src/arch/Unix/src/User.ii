#ifndef _User_ii_
#define _User_ii_
//
// File:        User.ii
// Desc:        
//
//  	inlines for User
//
// Author:      Paul Houghton - (paul_houghton@wiltel.com)
// Created:     07/17/95 18:55
//
// Revision History:
//
// $Log$
// Revision 2.2  1995/12/04 11:20:21  houghton
// Bug Fix - Can now compile with out '-DCLUE_DEBUG'.
//
// Revision 2.1  1995/11/10  12:46:57  houghton
// Change to Version 2
//
// Revision 1.3  1995/11/05  15:49:18  houghton
// Revised
//
//

#include <Compare.hh>

#if defined( CLUE_DEBUG )
#define inline
#endif

inline
User::User( bool findGroups )
{
  set( getuid(), findGroups );
}

inline
User::User( uid_t user, bool findGroups )
{
  set( user, findGroups );
}

inline
User::User( const char * user, bool findGrps )
{
  set( user, findGrps );
}

inline
User::User( const struct passwd * passwdEntry, bool findGrps )
{
  set( passwdEntry, findGrps );
}

inline
User::User( istream & src, bool text, bool findGrps )
{
  if( text )
    {
      char gname[ 50 ];
      src >> gname;
      set( gname, findGrps );
    }
  else
    {
      read( src );
      if( findGrps )
	findGroups();
    }
}

inline
uid_t
User::getUID( void ) const
{
  return( uid );
}

inline
const char *
User::getName( void ) const
{
  return( name );
}

inline
const char *
User::getPassword( void ) const
{
  return( passwd );
}

inline
const char *
User::getRealName( void ) const
{
  return( gecos );
}

inline
const char *
User::getGecos( void ) const
{
  return( gecos );
}

inline
const char *
User::getHome( void ) const
{
  return( home );
}

inline
const char *
User::getShell( void ) const
{
  return( shell );
}

inline
const UserGroup &
User::getPrimaryGroup( void ) const
{
  return( primeGroup );
}

inline
bool
User::isMember( gid_t group )
{
  UserGroup g( group, false );

  if( groups.size() == 0 )
    findGroups();
  
  return( groups.find( g ) != groups.end() );
}

inline
bool
User::isMember( gid_t group ) const
{
  UserGroup g( group, false );
  return( groups.find( g ) != groups.end() );
}

inline
bool
User::isMember( const char * group )
{
  UserGroup g( group, false );

  if( groups.size() == 0 )
    findGroups();
  
  return( groups.find( g ) != groups.end() );
}

inline
bool
User::isMember( const char * group ) const
{
  UserGroup g( group, false );
  return( groups.find( g ) != groups.end() );
}

inline
const User::Groups &
User::getGroups( void ) const
{
  return( groups );
}

inline
bool
User::set( uid_t user, bool findGrps )
{
  return( set( getpwuid( user ), findGrps ) );
}

inline
bool
User::set( const char * name, bool findGrps )
{
  return( set( getpwnam( name ), findGrps ));
}

inline
int
User::compare( const User & two ) const
{
  return( ::compare( name, two.name ) );
}

inline
User &
User::operator =  ( uid_t user )
{
  set( user );
  return( *this );
}

inline
bool
User::operator == ( const User & two ) const
{
  return( compare( two ) == 0 );
}

inline
bool
User::operator < ( const User & two ) const 
{
  return( compare( two ) < 0 );
}

inline
User::operator const char * ( void ) const
{
  return( name );
}

inline
User::operator uid_t ( void ) const
{
  return( uid );
}

inline
int
compare( const User & one, const User & two )
{
  return( one.compare( two ) );
}

inline
ostream &
operator << ( ostream & dest, const User & obj )
{
  return( obj.toStream( dest ) );
}

#endif // ! def _User_ii_ 
