#ifndef _Directory_ii_
#define _Directory_ii_
//
// File:        Directory.ii
// Project:	StlUtils (%PP%)
// Item:   	%PI% (%PF%)
// Desc:        
//
//  	Inline source for Directory
//
// Author:      Paul A. Houghton - (paul.houghton@wcom.com)
// Created:     09/19/95 07:59
//
// Revision History: (See end of file for Revision Log)
//
//  Last Mod By:    %PO%
//  Last Mod:	    %PRT%
//  Version:	    %PIV%
//  Status: 	    %PS%
//
//  %PID%
//


#if defined( STLUTILS_DEBUG )
#define inline
#endif

// Directory::DirField inlines

inline
Directory::DirField::DirField( void )
  : comp( Equal ),
    refCount( 1 )
{
}

inline
Directory::DirField::DirField( CompareType compType )
  : comp( compType ),
    refCount( 1 )
{
}

inline
void
Directory::DirField::addRef( void )
{
  refCount++;
}

inline
bool
Directory::DirField::delRef( void )
{
  if( refCount > 0 )
    refCount--;
  return( refCount == 0 );
}

// Directory::DirFieldName inlines

inline
Directory::DirFieldName::DirFieldName( void )
{
}

inline
Directory::DirFieldName::DirFieldName( const DirFieldName & from )
  : Directory::DirField( from ),
    value( from.value )
{
}

inline
Directory::DirFieldName
Directory::DirFieldName::operator == ( const char * rhs ) const
{
  return( DirFieldName( Equal, rhs ) );
}

inline
Directory::DirFieldName
Directory::DirFieldName::operator != ( const char * rhs ) const
{
  return( DirFieldName( NotEqual, rhs ) );
}

inline
Directory::DirFieldName
Directory::DirFieldName::operator < ( const char * rhs ) const
{
  return( DirFieldName( Less, rhs ) );
}

inline
Directory::DirFieldName
Directory::DirFieldName::operator > ( const char * rhs ) const
{
  return( DirFieldName( More, rhs ) );
}

inline
Directory::DirFieldName
Directory::DirFieldName::operator <= ( const char * rhs ) const
{
  return( DirFieldName( LessEqual, rhs ) );
}

inline
Directory::DirFieldName
Directory::DirFieldName::operator >= ( const char * rhs ) const
{
  return( DirFieldName( MoreEqual, rhs ) );
}

inline
Directory::DirFieldName::DirFieldName(
  CompareType	compType,
  const char *	compValue
  )
  : Directory::DirField( compType ),
    value( compValue )
{
}

// Directory::DirFieldSize inlines

inline
Directory::DirFieldSize::DirFieldSize( void )
  : value( 0 )
{
}

inline
Directory::DirFieldSize::DirFieldSize( const DirFieldSize & from )
  : Directory::DirField( from ),
    value( from.value )
{
}

inline
Directory::DirFieldSize
Directory::DirFieldSize::operator == ( size_type rhs ) const
{
  return( DirFieldSize( Equal, rhs ) );
}

inline
Directory::DirFieldSize
Directory::DirFieldSize::operator != ( size_type rhs ) const
{
  return( DirFieldSize( NotEqual, rhs ) );
}

inline
Directory::DirFieldSize
Directory::DirFieldSize::operator < ( size_type rhs ) const
{
  return( DirFieldSize( Less, rhs ) );
}

inline
Directory::DirFieldSize
Directory::DirFieldSize::operator > ( size_type rhs ) const
{
  return( DirFieldSize( More, rhs ) );
}

inline
Directory::DirFieldSize
Directory::DirFieldSize::operator <= ( size_type rhs ) const
{
  return( DirFieldSize( LessEqual, rhs ) );
}

inline
Directory::DirFieldSize
Directory::DirFieldSize::operator >= ( size_type rhs ) const
{
  return( DirFieldSize( MoreEqual, rhs ) );
}

inline
Directory::DirFieldSize::DirFieldSize(
  CompareType	compType,
  size_type	compValue
  )
  : Directory::DirField( compType ),
    value( compValue )
{
}

// Directory::DirFieldTime inlines

inline
Directory::DirFieldTime::DirFieldTime( void )
  : value( 0 )
{
}

inline
Directory::DirFieldTime::DirFieldTime( const DirFieldTime & from )
  : Directory::DirField( from ),
    value( from.value )
{
}

inline
Directory::DirFieldTime
Directory::DirFieldTime::operator == ( time_t rhs ) const
{
  return( DirFieldTime( Equal, rhs ) );
}

inline
Directory::DirFieldTime
Directory::DirFieldTime::operator != ( time_t rhs ) const
{
  return( DirFieldTime( NotEqual, rhs ) );
}

inline
Directory::DirFieldTime
Directory::DirFieldTime::operator < ( time_t rhs ) const
{
  return( DirFieldTime( Less, rhs ) );
}

inline
Directory::DirFieldTime
Directory::DirFieldTime::operator > ( time_t rhs ) const
{
  return( DirFieldTime( More, rhs ) );
}

inline
Directory::DirFieldTime
Directory::DirFieldTime::operator <= ( time_t rhs ) const
{
  return( DirFieldTime( LessEqual, rhs ) );
}

inline
Directory::DirFieldTime
Directory::DirFieldTime::operator >= ( time_t rhs ) const
{
  return( DirFieldTime( MoreEqual, rhs ) );
}

inline
Directory::DirFieldTime::DirFieldTime(
  CompareType	compType,
  time_t	compValue
  )
  : Directory::DirField( compType ),
    value( compValue )
{
}

// Directory::Where inlines

inline
Directory::Where::Where( void )
  : fld( 0 ),
    left( 0 ),
    andLR( false ),
    right( 0 ),
    refCount( 1 ),
    leftDepth( 0 ),
    rightDepth( 0 )
{
}

inline
Directory::Where::Where( const DirField & dirFld )
  : fld( dirFld.dup() ),
    left( 0 ),
    andLR( false ),
    right( 0 ),
    refCount( 1 ),
    leftDepth( 0 ),
    rightDepth( 0 )
{
}

inline
Directory::Where::Where( const Where & from )
  : fld( from.fld ),
    left( from.left ),
    andLR( from.andLR ),
    right( from.right ),
    refCount( 1 ),
    leftDepth( from.leftDepth ),
    rightDepth( from.rightDepth )
{
  if( fld )
    fld->addRef();

  if( left )
    left->addRef();

  if( right )
    right->addRef();
}

inline
Directory::Where::Where(
  const Where & leftWhere,
  bool		lrAnd,
  const Where & rightWhere
  )
  : fld( 0 ),
    left( new Where( leftWhere ) ),
    andLR( lrAnd ),
    right( new Where( rightWhere ) ),
    refCount( 1 ),
    leftDepth( leftWhere.leftDepth + 1 ),
    rightDepth( rightWhere.rightDepth + 1 )
{
}

inline
Directory::Where
Directory::Where::operator && ( const Where & rhs ) const
{
  Where w( *this, true, rhs );
  return( w );
}

inline
Directory::Where
Directory::Where::operator || ( const Where & rhs ) const
{
  Where w( *this, false, rhs );
  return( w );
}

inline
Directory::Where
operator && ( const Directory::DirField & lhs, const Directory::Where & rhs )
{
  Directory::Where lw( lhs );
  Directory::Where w( lw, true, rhs );
  return( w );
}

inline
Directory::Where
operator || ( const Directory::DirField & lhs, const Directory::Where & rhs )
{
  Directory::Where lw( lhs );
  Directory::Where w( lw, false, rhs );
  return( w );
}

inline
void
Directory::Where::addRef( void )
{
  ++ refCount;
}

inline
bool
Directory::Where::delRef( void )
{
  if( refCount )
    -- refCount;
  return( refCount == 0 );
}

inline
bool
Directory::Where::isField( void ) const
{
  return( fld != 0 );
}

inline
bool
Directory::Where::isAnd( void ) const
{
  return( andLR );
}

inline
const Directory::DirField &
Directory::Where::getField( void ) const
{
  return( *fld );
}

inline
const Directory::Where &
Directory::Where::getFirst( void ) const
{
  if( andLR )
    {
      if( rightDepth > leftDepth )
	return( *right );
      else
	return( *left );
    }
  else
    {
      if( rightDepth < leftDepth )
	return( *right );
      else
	return( *left );
    }
}

inline
const Directory::Where &
Directory::Where::getSecond( void ) const
{
  if( andLR )
    {
      if( rightDepth > leftDepth )
	return( *left );
      else
	return( *right );
    }
  else
    {
      if( rightDepth < leftDepth )
	return( *left );
      else
	return( *right );
    }
}

// Directory inlines

inline
Directory::iterator
Directory::begin( void )
{
  return( list.begin() );
}

inline
Directory::iterator
Directory::end( void )
{
  return( list.end() );
}

inline
Directory::const_iterator
Directory::begin( void ) const
{
  return( list.begin() );
}

inline
Directory::const_iterator
Directory::end( void ) const
{
  return( list.end() );
}

inline
bool
Directory::reread( void )
{
  return( buildDirList() );
}

inline
bool
Directory::reread( const Where & whereClause )
{
  where = &whereClause;
  return( buildDirList() );
}

inline
Directory::size_type
Directory::size( void ) const
{
  return( list.size() );
}

inline
bool
Directory::empty( void ) const
{
  return( size() == 0 );
}


#if defined( inline )
#undef inline
#endif

// Revision Log:
// 
// 
// %PL%
// 
// $Log$
// Revision 5.2  2001/07/26 19:29:00  houghton
// *** empty log message ***
//
// Revision 5.1  2000/05/25 10:33:15  houghton
// Changed Version Num to 5
//
// Revision 4.3  1999/10/28 14:20:32  houghton
// Bug-Fixes
//
// Revision 4.2  1998/07/20 11:20:25  houghton
// Port(Hpux10): Changed 'and' to 'andLR'. 'and' is now a keyword.
//
// Revision 4.1  1997/09/17 15:12:24  houghton
// Changed to Version 4
//
// Revision 3.5  1997/09/17 11:08:20  houghton
// Changed: renamed library to StlUtils.
//
// Revision 3.4  1997/07/18 21:33:21  houghton
// Port(Sun5): changed local variable names to eliminate compiler warnings.
//
// Revision 3.3  1997/06/09 14:37:41  houghton
// Changed AIX41 - had to use Directory::DirField in constructors.
//
// Revision 3.2  1997/06/09 12:04:01  houghton
// Completed initial coding.
//
// Revision 3.1  1996/11/14 01:25:20  houghton
// Changed to Release 3
//
// Revision 2.1  1995/11/10 12:47:08  houghton
// Change to Version 2
//
// Revision 1.2  1995/11/05  13:48:12  houghton
// New implementation
//
#endif // ! def _Directory_ii_ 
