#ifndef _LogLevel_ii_
#define _LogLevel_ii_
//
// File:        LogLevel.ii
// Proejct:	Clue
// Desc:        
//
//  	Source for LogLevel inline methods
//
// Author:      Paul Houghton - (paul_houghton@wiltel.com)
// Created:     07/20/95 09:50
//
// Revision History: (See end of file for Revision Log)
//
// $Id$
//

#if defined( CLUE_DEBUG )
#define inline
#endif

inline
LogLevel::LogLevel( const Level out, const Level cur )
  : output( out ),
    current( cur )
{
}

inline
LogLevel::LogLevel( const char * out )
{
  setCurrent( Error );
  setOutput( out );
}

inline
LogLevel::LogLevel( const LogLevel & from )
  : output( from.output ),
    current( from.current )
{
}

inline
LogLevel::Level
LogLevel::setOutput( const Level out )
{
  Level	old = output;
  output = out;
  return( old );
}

inline
LogLevel::Level
LogLevel::setOutput( const char * level )
{
  return( setOutput( levelFromString( level ) ) );
}
      
inline
LogLevel::Level
LogLevel::setCurrent( const Level cur )
{
  Level	old = current;
  current = cur;
  return( old );
}

inline
LogLevel::Level
LogLevel::setCurrent( const char * lvl )
{
  return( setCurrent( levelFromString( lvl ) ) );
}

inline
LogLevel::Level
LogLevel::getOutput( void ) const
{
  return( output );
}

inline
LogLevel::Level
LogLevel::getCurrent( void  ) const
{
  return( current );
}


inline
bool
LogLevel::shouldOutput( void ) const
{
  return( output & current );
}

inline
bool
LogLevel::willOutput( const Level level ) const
{
  return( level & output );
}

inline
int
LogLevel::compare( const LogLevel & two ) const
{
  int diff = current.compare( two.current );
  if( ! diff )
    return( output.compare( two.output ) );
  else
    return( diff );
}

inline
LogLevel &
LogLevel::operator =  ( const LogLevel & rhs )
{
  output  = rhs.output;
  current = rhs.current;
  return( *this );
}

inline
bool
LogLevel::operator == ( const LogLevel & rhs ) const
{
  return( compare( rhs ) == 0 );
}

inline
bool
LogLevel::operator <  ( const LogLevel & rhs ) const
{
  return( compare( rhs ) < 0 );
}


inline
ostream &
operator << ( ostream & dest, const LogLevel & obj )
{
  return( obj.toStream( dest ) );
}

#if defined( inline )
#undef inline
#endif

// Revision Log:
//
// $Log$
// Revision 3.1  1996/11/14 01:23:49  houghton
// Changed to Release 3
//
// Revision 2.5  1996/11/04 14:19:08  houghton
// Restructure header comments layout.
// Added Copy Construtor.
// Added setOutput( const char * ).
// Added setCurrent( const char * ).
// Added operator = ( const LogLevel & rhs ).
//
// Revision 2.4  1996/04/27 13:03:41  houghton
// Bug-Fix: if inline gets defined at the top, it needs to be undef at
//   at the bottom.
//
// Revision 2.3  1995/12/04 11:17:25  houghton
// Bug Fix - Can now compile with out '-DCLUE_DEBUG'.
//
// Revision 2.2  1995/11/12  18:05:44  houghton
// Change LogLevel::XXXX to LogLevel::Xxxxx.
// Move setName to LogLevel.C.
//
// Revision 2.1  1995/11/10  12:40:48  houghton
// Change to Version 2
//
// Revision 1.2  1995/11/05  15:28:41  houghton
// Revised
//
//
#endif // ! def _LogLevel_ii_ 
