#ifndef _Log_ii_
#define _Log_ii_
//
// File:        Log.ii
// Project:	Clue
// Desc:        
//
//  	Definition for Log class inline functions.
//
// Author:      Paul Houghton - (paul_houghton@wiltel.com)
// Created:     07/21/95 12:52
//
// Revision History: (See end of file for Revision Log)
//
// $Id$
//

#if defined( CLUE_DEBUG )
#define inline
#endif

inline
Log::Log(
    ostream & 		outstr,
    LogLevel::Level 	out,
    bool		stampLevel,
    bool		stampTime,
    bool		stampLoc
    )
  : ostream( new LogBuf( out, outstr.rdbuf() ) ),
    timeStamp( stampTime ),
    levelStamp( stampLevel ),
    locStamp( stampLoc )
{
  tie( &outstr );
}

inline
Log::Log(
    ostream & 		outstr,
    const char *	out,
    bool		stampLevel,
    bool		stampTime,
    bool		stampLoc
    )
  : ostream( new LogBuf( out, outstr.rdbuf() ) ),
    timeStamp( stampTime ),
    levelStamp( stampLevel ),
    locStamp( stampLoc )    
{
  tie( &outstr );
}

inline
Log::Log(
    const char * 	fileName,
    LogLevel::Level 	out,
    ios::open_mode	mode,
    int			prot,
    bool		stampLevel,
    bool		stampTime,
    bool		stampLoc,
    size_t		maxSize,
    size_t		trimSize
    )
  : ostream( new LogBuf(fileName, out, mode, prot, maxSize, trimSize ) ),
    timeStamp( stampTime ),
    levelStamp( stampLevel ),
    locStamp( stampLoc )    
{
  if( rdbuf() && ! rdbuf()->is_open() )
    setstate( ios::badbit );
}

inline
Log::Log(
    const char * 	fileName,
    const char *	out,
    ios::open_mode	mode,
    int			prot,
    bool		stampLevel,
    bool		stampTime,
    bool		stampLoc,
    size_t		maxSize,
    size_t		trimSize
    )
  : ostream( new LogBuf(fileName, out, mode, prot, maxSize, trimSize ) ),
    timeStamp( stampTime ),
    levelStamp( stampLevel ),
    locStamp( stampLoc )    
{
  if( rdbuf() && ! rdbuf()->is_open() )
    setstate( ios::badbit );
}

inline
Log::~Log( void )
{
  delete rdbuf();
}

inline
void
Log::tee( ostream & teeStream )
{
  rdbuf()->tee( teeStream.rdbuf() );
}

inline
size_t
Log::trim( size_t maxSize )
{
  return( rdbuf()->trim( maxSize ) );
}

inline
size_t
Log::setMaxSize( size_t max )
{
  return( rdbuf()->setMaxSize( max ) );
}

inline
size_t
Log::setTrimSize( size_t size )
{
  return( rdbuf()->setTrimSize( size ) );
}


inline
Log &
Log::operator () ( void )
{
  return( level( LogLevel::Error ) );
}

inline
Log &
Log::operator () ( LogLevel::Level lvl )
{
  return( level( lvl ) );
}

inline
Log &
Log::operator () ( LogLevel::Level lvl, const char * srcFile, long srcLine )
{
  return( level( lvl, srcFile, srcLine ) );
}

inline
Log &
Log::operator () ( const char * lvl )
{
  return( level( lvl ) );
}

inline
Log &
Log::operator () ( const char * lvl, const char * srcFile, long srcLine )
{
  return( level( lvl, srcFile, srcLine ) );
}

inline
void
Log::on( LogLevel::Level out )
{
  rdbuf()->sync();
  rdbuf()->setOutputLevel( getOutput() | out );
}

inline
void
Log::off( LogLevel::Level out )
{
  rdbuf()->sync();
  rdbuf()->setOutputLevel( getOutput() & ~out );
}

inline
LogLevel::Level
Log::getCurrent( void ) const
{
  return( rdbuf()->getLogLevel().getCurrent() );
}

inline
LogLevel::Level
Log::getOutput( void  ) const
{
  return( rdbuf()->getLogLevel().getOutput() );
}

inline
bool
Log::willOutput( LogLevel::Level outLevel ) const
{
  return( rdbuf()->getLogLevel().willOutput( outLevel ) );
}

inline
void
Log::setFileName( const char * outFn, ios::open_mode mode )
{
  open( outFn, mode );
}

inline
void
Log::open( const char * outFn, ios::open_mode mode )
{
  rdbuf()->close();
  
  if( rdbuf()->open( outFn, (ios::open_mode)mode ) != 0 )
    clear();
  else
    setstate( badbit );
}

inline
void
Log::close( void )
{
  if( rdbuf()->sync() == EOF )
    {
      setstate( eofbit | failbit );
    }
  
  rdbuf()->close();

  if( rdbuf() && rdbuf()->is_file() )
    setstate( badbit );
  
}

inline
LogLevel::Level
Log::setOutputLevel( const char * level )
{
  rdbuf()->sync();
  return( rdbuf()->setOutputLevel( level ) );
}

inline
LogLevel::Level
Log::setOutputLevel( LogLevel::Level level )
{
  rdbuf()->sync();
  return( rdbuf()->setOutputLevel( level ) );
}


inline
bool
Log::setLevelStamp( bool stamp )
{
  bool old = levelStamp;
  levelStamp = stamp;
  return( old );
}

inline
bool
Log::setTimeStamp( bool stamp )
{
  bool old = timeStamp;
  timeStamp = stamp;
  return( old );
}

inline
bool
Log::setLocStamp( bool stamp )
{
  bool old = locStamp;
  locStamp = stamp;
  return( old );
}

inline
bool
Log::filter( const char * regex )
{
  return( rdbuf()->filter( regex ) );
}

inline
LogBuf::FilterId
Log::addFilter(
  streambuf *	    dest,
  LogLevel::Level   outLevel,
  const char *	    regex
  )
{
  return( rdbuf()->addFilter( dest, outLevel, regex ) );
}

inline
streambuf *
Log::delFilter( LogBuf::FilterId id )
{
  return( rdbuf()->delFilter( id ) );
}

inline
LogBuf *
Log::rdbuf( void )
{
  return( (LogBuf *)(ios::rdbuf()) );
}

inline
const LogBuf *
Log::rdbuf( void ) const
{
#ifdef AIX
  // aix does not have a const rdbuf
  return( (const LogBuf *)(bp) );
#else
  return( (LogBuf *)(ios::rdbuf()) );
#endif
  
}


inline
bool
Log::lock( void )
{
  return( mutex.lock() );
}

inline
bool
Log::unlock( void )
{
  return( mutex.unlock() );
}

#if defined( inline )
#undef inline
#endif

//
// Revision Log:
//
// $Log$
// Revision 2.7  1996/11/13 16:34:40  houghton
// Bug-Fix: Log( const char * ...) set badbit if the log is a file
//     and it did not successfully open.
// Bug-Fix: rework open to correctly set the state of the stream.
// Added filter() code.
// Added addFilter() code.
// Added delFilter() code.
//
// Revision 2.6  1996/11/04 13:45:14  houghton
// Restructure header comments layout.
// Changed order of constructor args.
// Changed to work with modifications to LogBuf.
//
// Revision 2.5  1996/10/22 22:05:51  houghton
// Change: Added locStamp to turn on/off output of src file & line.
//
// Revision 2.4  1996/04/27 13:03:13  houghton
// Added thread locking support.
// Bug-Fix: if inline gets defined at the top, it needs to be undef at
//   at the bottom.
//
// Revision 2.3  1995/12/04 11:17:23  houghton
// Bug Fix - Can now compile with out '-DCLUE_DEBUG'.
//
// Revision 2.2  1995/11/12  18:01:54  houghton
// Added srcFile, srcLine args to level().
// Change LogLevel::XXXX to LogLevel::Xxxxx.
//
// Revision 2.1  1995/11/10  12:40:44  houghton
// Change to Version 2
//
// Revision 1.3  1995/11/05  15:28:38  houghton
// Revised
//
//
#endif // ! def _Log_ii_ 

