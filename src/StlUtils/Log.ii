#ifndef _Log_ii_
#define _Log_ii_
//
// File:        Log.ii
// Project:	StlUtils
// Desc:        
//
//  	Definition for Log class inline functions.
//
// Author:      Paul Houghton - (paul_houghton@wiltel.com)
// Created:     07/21/95 12:52
//
// Revision History: (See end of file for Revision Log)
//
// $Id$
//

#if defined( STLUTILS_DEBUG )
#define inline
#endif

inline
void
Log::tee( ostream & teeStream )
{
  rdbuf()->tee( teeStream.rdbuf() );
}

inline
size_t
Log::setMaxSize( size_t max )
{
  return( rdbuf()->setMaxSize( max ) );
}

inline
size_t
Log::setTrimSize( size_t size )
{
  return( rdbuf()->setTrimSize( size ) );
}


inline
Log &
Log::operator () ( void )
{
  return( level( LogLevel::Error ) );
}

inline
Log &
Log::operator () ( const LogLevel::Level & lvl )
{
  return( level( lvl ) );
}

inline
Log &
Log::operator () (
  const LogLevel::Level &   lvl,
  const char *		    srcFile,
  long			    srcLine
  )
{
  return( level( lvl, srcFile, srcLine ) );
}

inline
Log &
Log::operator () ( const char * lvl )
{
  return( level( lvl ) );
}

inline
Log &
Log::operator () ( const char * lvl, const char * srcFile, long srcLine )
{
  return( level( lvl, srcFile, srcLine ) );
}

inline
void
Log::on( const LogLevel::Level & outLvl )
{
  rdbuf()->sync();
  rdbuf()->setOutputLevel( getOutput() | outLvl );
}

inline
void
Log::off( const LogLevel::Level & outLvl )
{
  rdbuf()->sync();
  rdbuf()->setOutputLevel( getOutput() & ~outLvl );
}

inline
LogLevel::Level
Log::getCurrent( void ) const
{
  return( rdbuf()->getLogLevel().getCurrent() );
}

inline
LogLevel::Level
Log::getOutput( void  ) const
{
  return( rdbuf()->getLogLevel().getOutput() );
}

inline
bool
Log::willOutput( const LogLevel::Level & outLevel ) const
{
  return( rdbuf()->willOutput( outLevel ) );
}

inline
LogLevel::Level
Log::setOutputLevel( const char * level )
{
  rdbuf()->sync();
  return( rdbuf()->setOutputLevel( level ) );
}

inline
LogLevel::Level
Log::setOutputLevel( const LogLevel::Level & level )
{
  rdbuf()->sync();
  return( rdbuf()->setOutputLevel( level ) );
}


inline
bool
Log::setLevelStamp( bool stamp )
{
  bool old = levelStamp;
  levelStamp = stamp;
  return( old );
}

inline
bool
Log::setTimeStamp( bool stamp )
{
  bool old = timeStamp;
  timeStamp = stamp;
  return( old );
}

inline
bool
Log::setLocStamp( bool stamp )
{
  bool old = locStamp;
  locStamp = stamp;
  return( old );
}

inline
bool
Log::getLevelStamp( void ) const
{
  return( levelStamp );
}

inline
bool
Log::getTimeStamp( void ) const
{
  return( timeStamp );
}

inline
bool
Log::getLocStamp( void ) const
{
  return( locStamp );
}

inline
const FilePath &
Log::getLogFileName( void ) const
{
  return( (*rdbuf()).getLogFileName() );
}

inline
LogBuf *
Log::rdbuf( void )
{
  return( (LogBuf *)(ios::rdbuf()) );
}

inline
const LogBuf *
Log::rdbuf( void ) const
{
#if defined( AIX41 ) || defined( Sun5 ) || defined( Hpux10 )
  // aix does not have a const rdbuf
  return( (const LogBuf *)(bp) );
#else
  return( (const LogBuf *)(ios::rdbuf()) );
#endif
  
}

inline
const LogLevel::CommonLevelMap &
Log::getCommonLevelMap( void )
{
  if( ! commonLevelMap )
    initCommonLevelMap();
  
  return( *commonLevelMap );
}

inline
bool
Log::lock( void )
{
  return( mutex.lock() );
}

inline
bool
Log::unlock( void )
{
  return( mutex.unlock() );
}

#if defined( inline )
#undef inline
#endif

//
// Revision Log:
//
// $Log$
// Revision 4.3  1999/03/02 12:47:42  houghton
// Added getLogFileName().
//
// Revision 4.2  1998/07/20 11:21:22  houghton
// Port(Hpux): it also does not have a 'const' version of rdbuf().
//
// Revision 4.1  1997/09/17 15:12:34  houghton
// Changed to Version 4
//
// Revision 3.9  1997/09/17 11:08:28  houghton
// Changed: renamed library to StlUtils.
//
// Revision 3.8  1997/07/18 19:22:39  houghton
// Port(Sun5): changed local variable names to eliminate compiler warnings.
//
// Revision 3.7  1997/05/02 12:15:35  houghton
// Bug-Fix: changed commonLevelMap to a * to remove any posibilities of
//     problems with static instanciation.
// Changed all LogLevel::Level args to const & to avoid copy constructor calls.
//
// Revision 3.6  1997/04/26 14:11:35  houghton
// Added getCommonLevelMap().
//
// Revision 3.5  1997/04/04 03:09:57  houghton
// Changed constructors (and some other methods) to non-inline.
//
// Revision 3.4  1997/04/02 13:43:52  houghton
// Added getLevelStamp().
// Added getTimeStamp().
// Added getLocStamp().
//
// Revision 3.3  1997/04/01 15:09:06  houghton
// Bug-Fix: changed to use new LogBuf::willOutput that checks filters.
//
// Revision 3.2  1997/03/21 12:21:38  houghton
// Cleanup.
// Added localTimeStamp var to determin if logtime stamp should be
//     local or GMT.
//
// Revision 3.1  1996/11/14 01:23:46  houghton
// Changed to Release 3
//
// Revision 2.7  1996/11/13 16:34:40  houghton
// Bug-Fix: Log( const char * ...) set badbit if the log is a file
//     and it did not successfully open.
// Bug-Fix: rework open to correctly set the state of the stream.
// Added filter() code.
// Added addFilter() code.
// Added delFilter() code.
//
// Revision 2.6  1996/11/04 13:45:14  houghton
// Restructure header comments layout.
// Changed order of constructor args.
// Changed to work with modifications to LogBuf.
//
// Revision 2.5  1996/10/22 22:05:51  houghton
// Change: Added locStamp to turn on/off output of src file & line.
//
// Revision 2.4  1996/04/27 13:03:13  houghton
// Added thread locking support.
// Bug-Fix: if inline gets defined at the top, it needs to be undef at
//   at the bottom.
//
// Revision 2.3  1995/12/04 11:17:23  houghton
// Bug Fix - Can now compile with out '-DSTLUTILS_DEBUG'.
//
// Revision 2.2  1995/11/12  18:01:54  houghton
// Added srcFile, srcLine args to level().
// Change LogLevel::XXXX to LogLevel::Xxxxx.
//
// Revision 2.1  1995/11/10  12:40:44  houghton
// Change to Version 2
//
// Revision 1.3  1995/11/05  15:28:38  houghton
// Revised
//
//
#endif // ! def _Log_ii_ 

