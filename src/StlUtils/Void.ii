#ifndef _Void_ii_
#define _Void_ii_
//
// File:        Void.ii
// Project:	StlUtils ()
// Desc:        
//
//  	inlines for Void
//
// Author:      Paul Houghton - (paul4hough@gmail.com)
// Created:     11/11/95 06:24
//
// Revision History: (See end of file for Revision Log)
//
//  $Author$ 
//  $Date$ 
//  $Name$ 
//  $Revision$ 
//  $State$ 
//
// $Id$ 

#include <algorithm>

#if defined( STLUTILS_DEBUG )
#define inline
#endif

inline
Void::size_type
Void::size( void ) const
{
  return( dataSize );
}

inline
const void *
Void::vptr( void ) const
{
  return( data );
}

inline
bool
Void::get( void * dest, size_type destSize, size_type start ) const
{
  if( ! data )
    return( false );
  
  memcpy( dest, data + start, min( destSize, size() - start ) );

  return( true );
}

inline
Void &
Void::append( const Void & src )
{
  return( append( src.data, src.size() ) );
}

inline
Void &
Void::assign( const void * src, size_type size )
{
  reset();
  return( append( src, size ) );
}

inline
Void &
Void::assign( const Void & src )
{
  reset();
  return( append( src ) );
}

inline
Void &
Void::insert( size_type before, const void * src, size_type srcSize )
{
  return( replace( before, 0, src, srcSize ) );
}

inline
Void &
Void::insert( size_type before, const Void & src )
{
  return( replace( before, 0, src ) );
}

inline
Void &
Void::replace( size_type start, size_type len, const Void & src )
{
  return( replace( start, len, src.data, src.size() ) );
}

inline
Void &
Void::remove( size_type start, size_type len )
{
  return( replace( start, len, 0, 0 ) );
}

    
inline
void
Void::reset( void )
{
  dataSize = 0;
}

inline
Void &
Void::operator = ( const Void & rhs )
{
  assign( rhs );
  return( *this );
}

inline
bool
Void::operator == ( const Void & rhs ) const
{
  return( compare( rhs ) == 0 );
}

inline
bool
Void::operator < ( const Void & rhs ) const
{
  return( compare( rhs ) < 0 );
}


inline
Void &
Void::setError( ErrorNum err )
{
  errorNum = err;
  return( *this );
}


inline
DumpInfo< Void >
Void::dump( const char * prefix, bool showVer ) const
{
  return( DumpInfo< Void >( *this, prefix, showVer ) );
}

inline
ostream &
operator << ( ostream & dest, const Void & obj )
{
  return( obj.toStream( dest ) );
}

inline
int
compare( const Void & lhs, const Void & rhs )
{
  return( lhs.compare( rhs ) );
}

#if defined( inline )
#undef inline
#endif

// Revision Log:
//
// 
// %PL%
// 
// $Log$
// Revision 6.2  2011/12/30 23:57:23  paul
// First go at Mac gcc Port
//
// Revision 6.1  2003/08/09 11:22:44  houghton
// Changed to version 6
//
// Revision 5.4  2003/08/09 11:21:00  houghton
// Changed ver strings.
//
// Revision 5.3  2003/07/04 13:23:36  houghton
// Added operator =
// Added operator <
//
// Revision 5.2  2001/07/26 19:28:58  houghton
// *** empty log message ***
//
// Revision 5.1  2000/05/25 10:33:18  houghton
// Changed Version Num to 5
//
// Revision 4.2  1997/09/19 11:22:36  houghton
// Changed to use size_type.
//
// Revision 4.1  1997/09/17 15:13:10  houghton
// Changed to Version 4
//
// Revision 3.3  1997/09/17 11:08:59  houghton
// Changed: renamed library to StlUtils.
//
// Revision 3.2  1997/03/14 14:48:15  houghton
// Added dump() method.
//
// Revision 3.1  1996/11/14 01:24:30  houghton
// Changed to Release 3
//
// Revision 2.5  1996/05/14 13:53:46  houghton
// Added ::compare( const Void & lhs, const Void & rhs )
//
// Revision 2.4  1996/04/27 13:13:33  houghton
// Bug-Fix: if inline gets defined at the top, it needs to be undef at
//   at the bottom.
//
// Revision 2.3  1995/12/04 11:18:32  houghton
// Bug Fix - Can now compile with out '-DSTLUTILS_DEBUG'.
//
// Revision 2.2  1995/11/13  11:31:18  houghton
// Cleanup.
//
// Revision 2.1  1995/11/12  18:33:34  houghton
// Initial Version.
//
//
#endif // ! def _Void_ii_ 
