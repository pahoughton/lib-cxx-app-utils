#ifndef _Param_ii_
#define _Param_ii_
//
// File:        Param.ii
// Desc:        
//
//  	inlines for Param
//
//
// Author:      Paul Houghton - (houghton@cworld.wiltel.com)
// Created:     06/16/95 04:11
//
// Revision History:
//
// $Log$
// Revision 1.1  1995/11/05 13:23:28  houghton
// Initaial implementation
//
//

#ifndef inline
#include <StringUtils.hh>
#endif

inline
Log &
Param::log( void )
{
  return( appLog );
}

inline
Log &
Param::log( LogLevel::Level lvl )
{
  return( appLog.level( lvl ) );
}

inline
const char *
Param::appName( void ) const
{
  return( basename( argv[0] ) );
}

inline
const char *
Param::appFullName( void ) const
{
  return( argv[0] );
}

inline
char *
Param::arg( size_t which )
{
  return( (which < count()) ? argv[which] : 0 );
}

inline
int
Param::argInt( size_t which )
{
  if( which < count() )
    {
      return( StringToInt( argv[which] ) );
    }
  else
    {
      return( -1 );
    }  
}

inline
size_t
Param::count( void ) const
{
  return( argc );
}

inline
const char *
Param::env( const char * envVar ) const
{
  return( envVar ? getenv( envVar ) : 0 );
}

inline
bool
Param::help( void ) const
{
  return( helpFlag );
}

inline
bool
Param::allArgs( void ) const
{
  return( count() == 1 );
}

inline
void
Param::abort( int exitStatus, bool showArgs, ostream & dest )
{
  if( showArgs ) dest << *this << endl;
  
  dest << "Aborted - see log for more info" << endl;
  exit( exitStatus );
}


inline
ostream &
operator<<( ostream & dest, const Param & obj )
{
  return( obj.toStream( dest ) );
}


#endif // ! def _Param_ii_ 
