#ifndef _Bitmask_ii_
#define _Bitmask_ii_
//
// File:        Bitmask.ii
// Desc:        
//
//  	inlines for Bitmask
//
//
// Author:      Paul Houghton - (houghton@cworld.wiltel.com)
// Created:     05/18/95 04:39
//
// Revision History:
//
// $Log$
// Revision 1.2  1995/11/05 14:44:24  houghton
// Ports and Version ID changes
//
//

#if !defined( inline )
#include <Compare.hh>
#endif

inline
Bitmask::Bitmask( void )
{
  value = 0;
}

inline
Bitmask::Bitmask( size_t bit )
{
  value = 0;
  set( bit );
}

inline
Bitmask::Bitmask( unsigned long set, bool flip )
{
  if( flip )	value = ~set;
  else		value = set;
}

inline
Bitmask &
Bitmask::set( size_t pos )
{
  value |= 1UL << pos;
  return( *this );
}

inline
Bitmask &
Bitmask::clear( size_t pos )
{
  value &= ~(1UL << pos);
  return( *this );
}

inline
Bitmask &
Bitmask::clear( void )
{
  value = 0;
  return( *this );
}

inline
bool
Bitmask::isSet( size_t pos ) const
{
  return( value & (1UL << pos) );
}

inline
bool
Bitmask::isClear( size_t pos ) const
{
  return( ! isSet( pos ) );
}

inline
unsigned long
Bitmask::all( void ) const
{
  return( value );
}

inline
size_t
Bitmask::getStreamSize( void ) const
{
  return( sizeof( value ) );
}

inline
ostream &
Bitmask::write( ostream & dest ) const
{
  dest.write( (const char *)&value, sizeof( value ) );
  return( dest );
}

inline
istream &
Bitmask::read( istream & src )
{
  src.read( (char *)&value, sizeof( value ) );
  return( src );
}

inline
int
Bitmask::compare( const Bitmask & two ) const
{
  return( ::compare( value, two.value ) );
}

inline
int
Bitmask::compare( unsigned long two ) const
{
  return( ::compare( value, two ) );
}

inline
Bitmask &
Bitmask::operator = ( unsigned long rhs )
{
  value = rhs;
  return( *this );
}
  
inline
Bitmask &
Bitmask::operator &= ( const Bitmask & rhs )
{
  value &= rhs.value;
  return( *this );
}

inline
Bitmask &
Bitmask::operator |= ( const Bitmask & rhs )
{
  value |= rhs.value;
  return( *this );
}

inline
Bitmask &
Bitmask::operator ^= ( const Bitmask & rhs )
{
  value ^= rhs.value;
  return( *this );
}

inline
bool
Bitmask::operator () ( size_t pos ) const
{
  return( isSet( pos ) );
}

inline
bool
Bitmask::operator == ( const Bitmask & rhs ) const
{
  return( compare( rhs ) == 0 );
}

inline
bool
Bitmask::operator <  ( const Bitmask & rhs ) const
{
  return( compare( rhs ) < 0 );
}

inline
bool
Bitmask::operator == ( unsigned long rhs ) const
{
  return( compare( rhs ) == 0 );
}

inline
bool
Bitmask::operator != ( unsigned long rhs ) const
{
  return( compare( rhs ) != 0 );
}

inline
bool
Bitmask::operator <  ( unsigned long rhs ) const
{
  return( compare( rhs ) <  0 );
}

inline
bool
Bitmask::operator >  ( unsigned long rhs ) const
{
  return( compare( rhs ) >  0 );
}

inline
Bitmask::operator bool ( void ) const
{
  return( value != 0 );
}

inline
Bitmask::operator unsigned long ( void ) const
{
  return( all() );
}

inline
const char *
Bitmask::getClassName( void ) const
{
  return( "Bitmask" );
}

inline
ostream &
Bitmask::toStream( ostream & dest ) const
{
  for( int p = maxPos - 1; p >= 0; p-- )
    dest << ((isSet( p ) == true ) ? '1' : '0' );
  
  return( dest );
}

  
inline
Bitmask
operator & ( const Bitmask & lhs, const Bitmask & rhs )
{
  Bitmask ret( lhs );
  ret &= rhs;
  return( ret );
}

inline
Bitmask
operator | ( const Bitmask & lhs, const Bitmask & rhs )
{
  Bitmask ret( lhs );
  ret |= rhs;
  return( ret );
}

inline
Bitmask
operator ^ ( const Bitmask & lhs, const Bitmask & rhs )
{
  Bitmask ret( lhs );
  ret ^= rhs;
  return( ret );
}

inline
Bitmask
operator ~ ( const Bitmask & mask )
{
  unsigned long nValue = mask;
  Bitmask ret;

  ret = ~nValue;
  return( ret );
}

inline
int
compare( const Bitmask & one, const Bitmask & two )
{
  return( one.compare( two ) );
}

inline
int
compare( unsigned long one, const Bitmask & two )
{
  return( compare( one, two.all() ) );
}

inline
int
compare( const Bitmask & one, unsigned long two )
{
  return( one.compare( two ) );
}

inline
bool
operator == ( unsigned long lhs, const Bitmask & rhs )
{
  return( ::compare( lhs, rhs ) == 0 );
}

inline
bool
operator != ( unsigned long lhs, const Bitmask & rhs )
{
  return( ::compare( lhs, rhs ) != 0 );
}

inline
bool
operator <  ( unsigned long lhs, const Bitmask & rhs )
{
  return( ::compare( lhs, rhs ) <  0 );
}

inline
bool
operator >  ( unsigned long lhs, const Bitmask & rhs )
{
  return( ::compare( lhs, rhs ) >  0 );
}


inline
ostream &
operator << ( ostream & dest, const Bitmask & obj )
{
  return( obj.toStream( dest ) );
}

#endif // ! def _Bitmask_ii_ 
