#ifndef _FilePath_ii_
#define _FilePath_ii_
//
// File:        FilePath.ii
// Desc:        
//
//  	inlines for FilePath
//
//
// Author:      Paul Houghton - (houghton@cworld.wiltel.com)
// Created:     06/15/95 07:47
//
// Revision History:
//
// $Log$
// Revision 3.2  1996/11/20 12:06:44  houghton
// Changed: Major rework to change base class from Str to string.
//
// Revision 3.1  1996/11/14 01:23:43  houghton
// Changed to Release 3
//
// Revision 2.3  1996/04/27 12:59:46  houghton
// Bug-Fix: if inline gets defined at the top, it needs to be undef at
//   at the bottom.
//
// Revision 2.2  1995/12/04 11:17:22  houghton
// Bug Fix - Can now compile with out '-DCLUE_DEBUG'.
//
// Revision 2.1  1995/11/10  12:40:36  houghton
// Change to Version 2
//
// Revision 1.3  1995/11/05  15:28:35  houghton
// Revised
//
//

#if defined( CLUE_DEBUG )
#define inline
#endif

inline
FilePath::FilePath( char d, char e )
{
  dirDelim = d;
  extDelim = e;
}

inline
FilePath::FilePath( const char * fullName, char d, char e  )
{
  assign( fullName );
  dirDelim = d;
  extDelim = e;
}

inline
FilePath::FilePath(
  const char * 	dir,
  const char * 	fn,
  char 	    	d,
  char 	    	e
  )
{
  assign( dir );
  dirDelim = d;
  extDelim = e;

  if( at( size() - 1 ) != dirDelim )
    append( 1, dirDelim );

  append( fn );
}

inline
FilePath::FilePath( const FilePath & from )
{
  assign( from );
  dirDelim = from.dirDelim;
  extDelim = from.extDelim;
}

inline
string
FilePath::getFullName( void ) const
{
  return( c_str() );
}

inline
string
FilePath::getPath( void ) const
{
  string path = ".";

  size_t end = rfind( dirDelim );

  if( end != npos )
    path = substr( (size_type)0, end );

  return( path );
}

inline
string
FilePath::getFileName( void ) const
{
  string name;
  
  size_t beg = rfind( dirDelim );

  if( beg != npos )
    name = substr( beg + 1 );

  return( name );
}


inline
string
FilePath::getExt( void ) const
{
  string ext;
  
  size_t beg = rfind( extDelim );

  if( beg != npos )
    ext = substr( beg + 1 );

  return( ext );
}

inline
size_t
FilePath::getDepth( void ) const
{
  size_t depth = 0;
  for( size_t start = 0;
       start != npos;
       start = find( DirDelim, start + 1 ) )
    depth++;

  return( depth );
}
  
inline
bool
FilePath::set( const char * fullPath )
{
  assign( fullPath );
  return( true );
}

inline
bool
FilePath::set( const string & fullPath )
{
  assign( fullPath );
  return( true );
}

inline
bool
FilePath::operator == ( const FilePath & rhs ) const
{
  return( compare( rhs ) == 0);
}

inline
bool
FilePath::operator <  ( const FilePath & rhs ) const
{
  return( compare( rhs ) < 0 );
}

inline
int
compare( const FilePath & one, const FilePath & two )
{
  return( one.compare( two ) );
}

inline
ostream &
operator << ( ostream & dest, const FilePath & obj )
{
  return( obj.toStream( dest ) );
}

#if defined( inline )
#undef inline
#endif

#endif // ! def _FilePath_ii_ 

