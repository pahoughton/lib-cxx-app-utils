#ifndef _StlUtilsMisc_ii_
#define _StlUtilsMisc_ii_
//
// File:        StlUtilsMisc.ii
// Project:	StlUtils
// Desc:        
//
//  This file contains the source for the inline
//  functions documented in StlUtilsUtils.hh
//  
// Author:      Paul Houghton - (paul.houghton@wcom.com)
// Created:     05/02/95 06:32
//
// Revision History: (See end of file for Revision Log)
//
//  Last Mod By:    $Author$
//  Last Mod:	    $Date$
//  Version:	    $Revision$
//
//  $Id$
//

#if defined( inline )
#error 'inline defined'
#endif

template< class CounterMap, class KeyType >
inline
void
IncCounter( CounterMap & map, const KeyType & key )
{
  pair< CounterMap::iterator, bool >  ins;
    
  ins = map.insert( CounterMap::value_type( key, 1 ) );

  if( ! ins.second )
    {
      ++ (*ins.first).second;
    }
}
  
  

template< class NumberType, class SizeType >
inline
NumberType
Align( NumberType value, SizeType alignSize )
{
  return( ((value % alignSize) == 0) ?
	  value ? value : alignSize:
	  ( value + ( alignSize - ( value % alignSize ) ) ) );
}

template< class NumberType >
inline
NumberType
Align( NumberType value )
{
  return( Align( value, sizeof( value ) ) );
}

  
// tDwordAlign
inline
unsigned long
DwordAlign( unsigned long value )
{
  return( Align( value, (size_t)4 ) );
}

// tDwordAlign
inline
void *
DwordAlign( void * addr )
{
  if( sizeof( unsigned long ) != sizeof( void * ) ) return( 0 );
  
  unsigned long value = (unsigned long)addr;
  return( (void *)( DwordAlign( value ) ) );
}


// tMemOverlap
inline
bool
MemOverlap( const void * one, size_t lenOne, const void * two, size_t lenTwo )
{
  const char * o = (const char *)one;
  const char * t = (const char *)two;

  return( ( ( lenOne && lenTwo ) ?
	    ( ( o <= t ) ?
	      ( ((o + lenOne)-1) >= t ) :
	      ( ((t + lenTwo)-1) >= o ) ) :
	    0 ) );
}


template< class RangeType, class ValueType >
inline
bool
Between( RangeType a, RangeType b, ValueType value )
{
  return( a < b ? a <= value && value <= b : b <= value && value <= a );
}

template< class NumType >
inline
bool
Overlap( NumType startOne, NumType endOne, NumType startTwo, NumType endTwo )
{
  return( ( startOne <= endTwo && endOne >= startTwo )
	  || ( startTwo <= endOne && endTwo >= startOne ) );
}
  
#if !defined( STLUTILS_HAVE_LONG_ABS )
inline
long
abs( long value )
{
  return( value < 0 ? (value * -1) : value );
}
#endif


// tIsBaseDigit
inline
bool
IsBaseDigit( int d, unsigned short base )
{
  return( ( d >= 0 && d < base ) );
}


inline
unsigned long
UnionOf( long startOne, long endOne, long startTwo, long endTwo )
{
  if( startTwo <= endOne &&
      endTwo >= startOne )
    {
      return( ( (endTwo - startTwo) + (endOne - startOne) -
		( abs( startOne - startTwo ) +
		  abs( endTwo - endOne ) ) ) / 2 );
    }
  return( 0 );
}

inline
unsigned long
UnionOfDur( long startOne, long durOne, long startTwo, long durTwo )
{
  return( UnionOf( startOne,
		   startOne + durOne,
		   startTwo,
		   startTwo + durTwo ) );
}

inline
unsigned long
UnionOfDur(
  unsigned long startOne,
  unsigned long durOne,
  unsigned long startTwo,
  unsigned long durTwo,
  unsigned long frequency
  )
{
  unsigned long	    unionSum = 0;

  for( unsigned long startOfOne = startOne;
       startOfOne < (startTwo + durTwo );
       startOfOne += frequency )
    {
      unionSum += UnionOfDur( startOfOne, durOne, startTwo, durTwo );
    }

  return( unionSum );
}      

template< class NumberType >
inline
NumberType
Round( NumberType value, int factor )
{
  NumberType remain =  value % factor;

  if( abs( remain ) < ((factor + 1) / 2) )
    {
      return( value - remain );
    }
  else
    {
      return( value + ( value < 0 ? -(factor + remain) : factor - remain ) );
    }
}

template< class NumberType >
inline
NumberType
RoundUp( NumberType value, int factor  )
{
  NumberType remain = value % factor;

  if( remain == 0 )
    {
      return( value );
    }
  else
    {
      return( value < 0 ? value - remain : value - remain + factor );
    }
}

template< class NumberType >
inline
NumberType
RoundDown( NumberType value, int factor  )
{

  NumberType remain = value % factor;

  if( remain == 0 )
    {
      return( value );
    }
  else
    {
      return( value < 0 ? value - remain - factor : value - remain );
    }
}

//
// Revision Log:
// 
// $Log$
// Revision 4.4  2000/03/10 11:38:58  houghton
// Added IncCounter().
//
// Revision 4.3  1999/03/02 12:49:15  houghton
// Added Between.
// Added Overlap.
//
// Revision 4.2  1998/10/23 13:06:26  houghton
// Bug-Fix: the Round*() methods were not working correctly with negative
//     values.
//
// Revision 4.1  1997/09/17 15:12:50  houghton
// Changed to Version 4
//
// Revision 3.2  1997/09/17 11:08:43  houghton
// Changed: renamed library to StlUtils.
//
// Revision 3.1  1996/11/14 01:23:29  houghton
// Changed to Release 3
//
// Revision 2.7  1996/11/11 13:32:59  houghton
// Bug-Fix: had to change Align to use a template class for SizeType
//
// Revision 2.6  1996/11/04 18:21:19  houghton
// Renamed StlUtils.hh to StlUtilsUtils.hh.
//
// Revision 2.5  1996/11/04 13:31:53  houghton
// Restructure header comments layout.
// Moved ArraySize to .hh
// Bug fix: Align - change to if value == 0 return alignsize.
// Removed Net2Host functions (now in separate Net2Host.hh
// Changed UnionOfDur to call UnionOf
//
// Revision 2.4  1996/04/27 12:53:27  houghton
// Removed unneeded includes.
//
// Revision 2.3  1996/03/13 11:24:46  houghton
// Bug Fix: fixed include file #ifdefs
// Add: Net2Host & Host2Net translators
//
// Revision 2.2  1996/02/29 19:04:56  houghton
// Added ifdef for abs( long )
//
// Revision 2.1  1995/11/10 12:40:21  houghton
// Change to Version 2
//
// Revision 1.1  1995/11/05  13:23:18  houghton
// Initaial implementation
//
//
#endif // ! def _StlUtilsMisc_ii_ 
