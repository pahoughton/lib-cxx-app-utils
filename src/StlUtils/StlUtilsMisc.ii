#ifndef _ClueUtils_ii_
#define _ClueUtils_ii_
//
// File:        ClueUtils.ii
// Proejct:	Clue
// Desc:        
//
//  This file contains the source for the inline
//  functions documented in ClueUtils.hh
//  
//
// Author:      Paul Houghton - (houghton@cworld.wiltel.com)
// Created:     05/02/95 06:32
//
// Revision History:
//
// $Log$
// Revision 2.6  1996/11/04 18:21:19  houghton
// Renamed Clue.hh to ClueUtils.hh.
//
// Revision 2.5  1996/11/04 13:31:53  houghton
// Restructure header comments layout.
// Moved ArraySize to .hh
// Bug fix: Align - change to if value == 0 return alignsize.
// Removed Net2Host functions (now in separate Net2Host.hh
// Changed UnionOfDur to call UnionOf
//
// Revision 2.4  1996/04/27 12:53:27  houghton
// Removed unneeded includes.
//
// Revision 2.3  1996/03/13 11:24:46  houghton
// Bug Fix: fixed include file #ifdefs
// Add: Net2Host & Host2Net translators
//
// Revision 2.2  1996/02/29 19:04:56  houghton
// Added ifdef for abs( long )
//
// Revision 2.1  1995/11/10 12:40:21  houghton
// Change to Version 2
//
// Revision 1.1  1995/11/05  13:23:18  houghton
// Initaial implementation
//
//

#if defined( inline )
#error 'inline defined'
#endif



template< class NumberType >
inline
NumberType
Align( NumberType value, size_t alignSize )
{
  return( ((value % alignSize) == 0) ?
	  value ? value : alignSize:
	  ( value + ( alignSize - ( value % alignSize ) ) ) );
}

template< class NumberType >
inline
NumberType
Align( NumberType value )
{
  return( Align( value, sizeof( value ) ) );
}

  
// tDwordAlign
inline
unsigned long
DwordAlign( unsigned long value )
{
  return( Align( value, (size_t)4 ) );
}

// tDwordAlign
inline
void *
DwordAlign( void * addr )
{
  if( sizeof( unsigned long ) != sizeof( void * ) ) return( 0 );
  
  unsigned long value = (unsigned long)addr;
  return( (void *)( DwordAlign( value ) ) );
}


// tMemOverlap
inline
bool
MemOverlap( const void * one, size_t lenOne, const void * two, size_t lenTwo )
{
  const char * o = (const char *)one;
  const char * t = (const char *)two;

  return( ( ( lenOne && lenTwo ) ?
	    ( ( o <= t ) ?
	      ( ((o + lenOne)-1) >= t ) :
	      ( ((t + lenTwo)-1) >= o ) ) :
	    0 ) );
}


#if !defined( CLUE_HAVE_LONG_ABS )
inline
long
abs( long value )
{
  return( value < 0 ? (value * -1) : value );
}
#endif


// tIsBaseDigit
inline
bool
IsBaseDigit( int d, unsigned short base )
{
  return( ( d >= 0 && d < base ) );
}


inline
unsigned long
UnionOf( long startOne, long endOne, long startTwo, long endTwo )
{
  if( startTwo <= endOne &&
      endTwo >= startOne )
    {
      return( ( (endTwo - startTwo) + (endOne - startOne) -
		( abs( startOne - startTwo ) +
		  abs( endTwo - endOne ) ) ) / 2 );
    }
  return( 0 );
}

inline
unsigned long
UnionOfDur( long startOne, long durOne, long startTwo, long durTwo )
{
  return( UnionOf( startOne,
		   startOne + durOne,
		   startTwo,
		   startTwo + durTwo ) );
}

inline
unsigned long
UnionOfDur(
  unsigned long startOne,
  unsigned long durOne,
  unsigned long startTwo,
  unsigned long durTwo,
  unsigned long frequency
  )
{
  unsigned long	    unionSum = 0;

  for( unsigned long startOfOne = startOne;
       startOfOne < (startTwo + durTwo );
       startOfOne += frequency )
    {
      unionSum += UnionOfDur( startOfOne, durOne, startTwo, durTwo );
    }

  return( unionSum );
}      

template< class NumberType >
inline
NumberType
Round( NumberType value, int factor )
{
  NumberType remain = value % factor;

  if( remain < ((factor + 1) / 2) )
    {
      return( value - remain );
    }
  else
    {
      return( value + ( factor - remain ) );
    }
}

template< class NumberType >
inline
NumberType
RoundUp( NumberType value, int factor  )
{
  NumberType remain = value % factor;

  if( remain == 0 )
    {
      remain = factor;
    }

  return( (value - remain) + factor );
}

template< class NumberType >
inline
NumberType
RoundDown( NumberType value, int factor  )
{

  NumberType remain = value % factor;

  return( value - remain );
}

#endif // ! def _ClueUtils_ii_ 


