#ifndef _SubStr_ii_
#define _SubStr_ii_
//
// File:        SubStr.ii
// Project:	StlUtils
// Desc:        
//
//  	Inline source for SubStr
//
// Author:      Paul A. Houghton - (paul.houghton@wcom.com)
// Created:     06/06/95 05:52
//
// Revision History: (See end of file for Revision Log)
//
//  Last Mod By:    $Author$
//  Last Mod:	    $Date$
//  Version:	    $Revision$
//
//  $Id$
//


#include <Str.hh>
#include <StringUtils.hh>
#include <algorithm>

#if defined( STLUTILS_DEBUG )
#define inline
#endif

inline
SubStr::SubStr( Str & src, size_type start, size_type length )
  : str( src ),
    constStr( src ),
    pos( start ),
    len( min( src.size() - start, length ) )
{
}

inline
SubStr::SubStr( const Str & src, size_type start, size_type length )
  : str(dummyStr),
    constStr( src ),
    pos( start ),
    len( min( src.size() - start, length ) )
{
  ;
}

inline
SubStr::size_type
SubStr::size( void ) const
{
  return( len );
}

inline
SubStr::size_type
SubStr::length( void ) const
{
  return( size() );
}

inline
bool
SubStr::empty( void ) const
{
  return( size() == 0 );
}

inline
Str &
SubStr::of( void )
{
  return( str );
}

inline
const Str &
SubStr::of( void ) const
{
  return( str );
}

inline
SubStr::size_type
SubStr::copy( char * dest, size_type destLen, size_type start ) const
{
  size_type copyLen = (destLen == npos ? size() - start :
		       min( destLen, size() - start ) );
  
  strncpy( dest, strbase() + start, copyLen );
  if( destLen == npos || copyLen < destLen )
    dest[ copyLen ] = 0;
  return( copyLen );
}
  
inline
bool
SubStr::to( bool & dest ) const
{
  return( size() ? StringTo( dest, strbase(), length() ) : false );
}

inline
bool
SubStr::to( int & dest, unsigned short base ) const
{
  return( size() ? StringTo( dest, strbase(), base,  length() ) : false );
}

inline
bool
SubStr::to( short & dest, unsigned short base ) const
{
  return( size() ? StringTo( dest, strbase(), base,  length() ) : false );
}

inline
bool
SubStr::to( long & dest, unsigned short base ) const
{
  return( size() ? StringTo( dest, strbase(), base,  length() ) : false );
}

inline
bool
SubStr::to( float & dest, unsigned short base ) const
{
  return( size() ? StringTo( dest, strbase(), base,  length() ) : false );
}

inline
bool
SubStr::to( double & dest, unsigned short base ) const
{
  return( size() ? StringTo( dest, strbase(), base,  length() ) : false );
}

inline
bool
SubStr::to( unsigned int & dest, unsigned short base ) const
{
  return( size() ? StringTo( dest, strbase(), base,  length() ) : false );
}

inline
bool
SubStr::to( unsigned short & dest, unsigned short base ) const
{
  return( size() ? StringTo( dest, strbase(), base,  length() ) : false );
}

inline
bool
SubStr::to( unsigned long & dest, unsigned short base ) const
{
  return( size() ? StringTo( dest, strbase(), base,  length() ) : false );
}

inline
bool
SubStr::toBool( void ) const
{
  bool dest = false;
  StringTo( dest, strbase(), length());
  return( dest );
}

inline
int
SubStr::toInt( unsigned short base ) const
{
  int dest = 0;
  to( dest, base );
  return( dest );
}

inline
long
SubStr::toLong( unsigned short base ) const
{
  long dest = 0;
  to( dest, base );
  return( dest );
}

inline
double
SubStr::toDouble( unsigned short base ) const
{
  double dest = 0;
  to( dest, base );
  return( dest );
}

inline
unsigned int
SubStr::toUInt( unsigned short base ) const
{
  unsigned int dest = 0;
  to( dest, base );
  return( dest );
}

inline
unsigned long
SubStr::toULong( unsigned short base ) const
{
  unsigned long dest = 0;
  to( dest, base );
  return( dest );
}

inline
char &
SubStr::operator [] ( size_type index )
{
  static char bad = 0;
  STLUTILS_EXCPT_OUT_OF_RANGE( index >= size(), bad );
  return( str[ pos + index ] );
}

inline
char 
SubStr::operator [] ( size_type index ) const
{
  STLUTILS_EXCPT_OUT_OF_RANGE( index >= size(), 0 );  
  return( constStr[ pos + index ] );
}

inline
SubStr &
SubStr::operator =  ( const SubStr & src )
{
  str.replace( pos, len, src );
  len = src.size();
  return( *this );
}

inline
SubStr &
SubStr::operator =  ( const Str & src )
{
  str.replace( pos, len, src );
  len = src.size();
  return( *this );
}

inline
SubStr &
SubStr::operator =  ( const char * src )
{
  str.replace( pos, len, src );
  len = strlen( src );
  return( *this );
}

inline
SubStr &
SubStr::operator =  ( char src )
{
  str.replace( pos, len, src );
  len = 1;
  return( *this );
}


inline
SubStr &
SubStr::operator += ( const SubStr & src )
{
  str.replace( pos + len, 0, src );
  len += src.size();
  return( *this );
}

inline
SubStr &
SubStr::operator += ( const Str & src )
{
  str.replace( pos + len, 0, src );
  len += src.size();
  return( *this );
}

inline
SubStr &
SubStr::operator += ( const char * src )
{
  str.replace( pos + len, 0, src );
  len += strlen( src );
  return( *this );
}

inline
SubStr &
SubStr::operator += ( char src )
{
  str.replace( pos + len, 0, src );
  len += 1;
  return( *this );
}

inline
bool
SubStr::operator == ( const SubStr & two ) const
{
  return( compare( two ) == 0 );
}

inline
bool
SubStr::operator == ( const Str & two ) const
{
  return( compare( two ) == 0 );
}

inline
bool
SubStr::operator == ( const char * two ) const
{
  return( compare( two ) == 0 );
}


inline
bool
SubStr::operator <  ( const SubStr & two ) const
{
  return( compare( two ) < 0 );
}

inline
bool
SubStr::operator <  ( const Str & two ) const
{
  return( compare( two ) < 0 );
}

inline
bool
SubStr::operator <  ( const char * two ) const
{
  return( compare( two ) < 0 );
}

inline
bool
SubStr::operator != ( const SubStr & two ) const
{
  return( ! ( *this == two ) );
}

inline
bool
SubStr::operator != ( const Str & two ) const
{
  return( ! ( *this == two ) );
}

inline
bool
SubStr::operator != ( const char * two ) const
{
  return( ! ( *this == two ) );
}

inline
bool
SubStr::operator >  ( const SubStr & two ) const
{
  return( compare( two ) > 0 );
}

inline
bool
SubStr::operator >  ( const Str & two ) const
{
  return( compare( two ) > 0 );
}

inline
bool
SubStr::operator >  ( const char * two ) const
{
  return( compare( two ) > 0 );
}

inline
bool
SubStr::operator <=  ( const SubStr & two ) const
{
  return( compare( two ) <= 0 );
}

inline
bool
SubStr::operator <=  ( const Str & two ) const
{
  return( compare( two ) <= 0 );
}

inline
bool
SubStr::operator <=  ( const char * two ) const
{
  return( compare( two ) <= 0 );
}

inline
bool
SubStr::operator >=  ( const SubStr & two ) const
{
  return( compare( two ) >= 0 );
}

inline
bool
SubStr::operator >=  ( const Str & two ) const
{
  return( compare( two ) >= 0 );
}

inline
bool
SubStr::operator >=  ( const char * two ) const
{
  return( compare( two ) >= 0 );
}


inline
bool
SubStr::good( void ) const
{
  return( constStr.good() && str.good() );
}

inline
ostream &
operator << ( ostream & dest, const SubStr & src )
{
  return( src.toStream( dest ) );
}

inline
istream &
operator >> ( istream & src, SubStr & dest )
{
  Str tmp( src );
  if( src.good() )
    dest = tmp;
  return( src );
}

inline
const char *
SubStr::strbase( void ) const
{
  return( constStr.strbase() + pos );
}

#if !defined( inline )
#define SUBSTR_COMP_LEN	= SubStr::npos
#else
#define SUBSTR_COMP_LEN
#endif


inline
int
compare(
  const SubStr &    one,
  const char *	    two,
  SubStr::size_type len SUBSTR_COMP_LEN )
{
  return( one.compare( two, 0, len ) );
}

inline
int
fcompare(
  const SubStr &    one,
  const char *	    two,
  SubStr::size_type len SUBSTR_COMP_LEN )
{
  return( one.fcompare( two, 0, len ) );
}

inline
Str
operator + ( const SubStr & lhs, const Str & rhs )
{
  Str s( lhs );
  s += rhs;
  return( s );
}

inline
Str
operator + ( const SubStr & lhs, const SubStr & rhs )
{
  Str s( lhs );
  s += rhs;
  return( s );
}

inline
Str
operator + ( const SubStr & lhs, const char * rhs )
{
  Str s( lhs );
  s += rhs;
  return( s );
}

inline
Str
operator + ( const char * lhs, const SubStr & rhs )
{
  Str s( lhs );
  s += rhs;
  return( s );
}

inline
bool
operator == ( const char * lhs, const SubStr & rhs )
{
  return( compare( lhs, rhs ) == 0 );
}

inline
bool
operator != ( const char * lhs, const SubStr & rhs )
{
  return( compare( lhs, rhs ) != 0 );
}


inline
bool
operator <  ( const char * lhs, const SubStr & rhs )
{
  return( compare( lhs, rhs ) < 0 );
}

inline
bool
operator >  ( const char * lhs, const SubStr & rhs )
{
  return( compare( lhs, rhs ) >  0 );
}

inline
bool
operator <= ( const char * lhs, const SubStr & rhs )
{
  return( compare( lhs, rhs ) <= 0 );
}

inline
bool
operator >= ( const char * lhs, const SubStr & rhs )
{
  return( compare( lhs, rhs ) >= 0 );
}


inline
bool
StringToBool( const SubStr & str )
{
  return( str.toBool() );
}

#if defined( inline )
#define SUBSTR_DEF_BASE
#else
#define SUBSTR_DEF_BASE = 0
#endif

inline
int
StringToInt( const SubStr & str, unsigned short base SUBSTR_DEF_BASE )
{
  return( str.toInt( base ) );
}

inline
long
StringToLong( const SubStr & str, unsigned short base SUBSTR_DEF_BASE )
{
  return( str.toLong( base ) );
}

inline
double
StringToDouble( const SubStr & str, unsigned short base SUBSTR_DEF_BASE )
{
  return( str.toDouble( base ) );
}

inline
unsigned int
StringToUInt( const SubStr & str, unsigned short base SUBSTR_DEF_BASE )
{
  return( str.toUInt( base ) );
}

inline
unsigned long
StringToULong( const SubStr & str, unsigned short base SUBSTR_DEF_BASE )
{
  return( str.toULong( base ) );
}


#ifdef STD_STRING
inline
bool
SubStr::operator <  ( const string & two ) const
{
  return( compare( two ) < 0 );
}
#endif

#ifdef STD_STRING
inline
bool
SubStr::operator == ( const string & two ) const
{
  return( compare( two ) == 0 );
}
#endif

#ifdef STD_STRING
inline
SubStr &
SubStr::operator += ( const string & src )
{
  str.replace( pos + len, 0, src );
  len += src.size();
  return( *this );
}
#endif

#ifdef STD_STRING
inline
SubStr &
SubStr::operator =  ( const string & src )
{
  str.replace( pos, len, src );
  len = src.size();
  return( *this );
}
#endif

#if defined( inline )
#undef inline
#endif

// Revision Log:
// 
// $Log$
// Revision 4.2  1997/09/19 11:22:30  houghton
// Changed to use size_type.
//
// Revision 4.1  1997/09/17 15:13:06  houghton
// Changed to Version 4
//
// Revision 3.6  1997/09/17 11:08:56  houghton
// Changed: renamed library to StlUtils.
//
// Revision 3.5  1997/09/02 21:29:16  houghton
// Port(Sun5): Changed variable name 'len' to copyLen to avoid compiler warning.
//
// Revision 3.4  1997/08/28 16:34:11  houghton
// Bug-Fix: moved toStream to .C (was inline) and added support
//     for setw(n) (the width was being ignored).
//
// Revision 3.3  1997/08/17 22:35:52  houghton
// Added copy( const char * ... ).
//
// Revision 3.2  1997/07/18 19:30:52  houghton
// Port(Sun5): reworked istream operator >> SubStr to eliminate compiler error.
//
// Revision 3.1  1996/11/14 01:24:24  houghton
// Changed to Release 3
//
// Revision 2.7  1996/07/09 11:34:53  houghton
// Bug-Fix: Change to StringToBool to StringTo.
//
// Revision 2.6  1996/05/25 12:36:25  houghton
// Added of method. returns owning Str.
//
// Revision 2.5  1996/05/03 16:13:52  houghton
// AIX Port cleanup.
//
// Revision 2.4  1996/04/27 13:09:56  houghton
// Bug-Fix: if inline gets defined at the top, it needs to be undef at
//   at the bottom.
//
// Revision 2.3  1996/02/29 19:07:35  houghton
// Added some ifndefs for GNU
//
// Revision 2.2  1995/12/04 11:18:30  houghton
// Bug Fix - Can now compile with out '-DSTLUTILS_DEBUG'.
//
// Revision 2.1  1995/11/10  12:41:18  houghton
// Change to Version 2
//
// Revision 1.2  1995/11/05  14:44:54  houghton
// Ports and Version ID changes
//
//

#endif // ! def _SubStr_ii_ 
