#ifndef _LogBuf_ii_
#define _LogBuf_ii_
//
// File:        LogBuf.ii
// Project:	Clue
// Desc:        
//
//  	Definitions for LogBuf inline functions.
//
// Author:      Paul Houghton - (paul_houghton@wiltel.com)
// Created:     07/21/95 12:26
//
// Revision History: (See end of file for Revision Log)
//
// $Id$
//

#include <RegexScan.hh>

#if defined( CLUE_DEBUG )
#define inline
#endif

inline
LogBuf::LogBuf(
  LogLevel::Level   outLevel,
  streambuf *	    outStream
  )
  : maxSize( 0 ),
    trimSize( 0 ),
    streamIsFile( false ),
    buffer( 0 ),
    stream( 0 ),
    teeStream( 0 ),
    logLevel( outLevel ),
    regex( 0 ),
    newMesg( true )
{
  initbuf( outStream );
}

inline
LogBuf::LogBuf(
  const char * 	outLevel,
  streambuf *	outStream
  )
  : maxSize( 0 ),
    trimSize( 0 ),
    streamIsFile( false ),
    buffer( 0 ),
    stream( 0 ),
    teeStream( 0 ),
    logLevel( outLevel ),
    regex( 0 ),
    newMesg( true )
{
  initbuf( outStream );
}


inline
LogBuf::LogBuf(
  const char *	    fileName,
  LogLevel::Level   outLevel,
  ios::open_mode    mode,
  int		    prot,
  size_t	    logMaxSize,
  size_t	    logTrimSize
  )
  : maxSize( 0 ),
    trimSize( 0 ),
    streamIsFile( false ),
    buffer( 0 ),
    stream( 0 ),
    teeStream( 0 ),
    logLevel( outLevel ),
    regex( 0 ),
    newMesg( true )
{
  initbuf( fileName, mode, prot, logMaxSize, logTrimSize );
}
  
inline
LogBuf::LogBuf(
  const char *	    fileName,
  const char *      outLevel,
  ios::open_mode    mode,
  int		    prot,
  size_t	    logMaxSize,
  size_t	    logTrimSize
  )
  : maxSize( 0 ),
    trimSize( 0 ),
    streamIsFile( false ),
    buffer( 0 ),
    stream( 0 ),
    teeStream( 0 ),
    logLevel( outLevel ),
    regex( 0 ),
    newMesg( true )
{
  initbuf( fileName, mode, prot, logMaxSize, logTrimSize );
}

inline LogLevel::Level
LogBuf::setCurrentLevel( LogLevel::Level cur )
{
  newMesg = true;
  return( logLevel.setCurrent( cur ) );
}

inline LogLevel::Level
LogBuf::setCurrentLevel( const char * cur )
{
  newMesg = true;
  return( logLevel.setCurrent( cur ) );
}

inline LogLevel::Level
LogBuf::setOutputLevel( LogLevel::Level out )
{
  newMesg = true;
  return( logLevel.setOutput( out ) );
}

inline LogLevel::Level
LogBuf::setOutputLevel( const char * out )
{
  newMesg = true;
  return( logLevel.setOutput( out ) );
}

inline
const LogLevel &
LogBuf::getLogLevel( void ) const
{
  return( logLevel );
}

inline
size_t
LogBuf::setMaxSize( size_t size )
{
  size_t old = maxSize;
  maxSize = size;
  trim();
  return( old );
}

inline
size_t
LogBuf::setTrimSize( size_t size )
{
  size_t old = trimSize;
  trimSize = size;
  return( old );
}

inline
streambuf *
LogBuf::tee( streambuf * teeStreambuf )
{
  sync();
  streambuf * old = teeStream;
  teeStream = teeStreambuf;
  return( old );
}

inline
bool
LogBuf::is_file( void ) const
{
  return( streamIsFile );
}

inline
bool
LogBuf::is_open( void ) const
{
  return( stream != 0 );
}

inline
bool
LogBuf::filter( const char * regexStr )
{
  sync();
  if( regex )
    {     
      delete regex;
      regex = 0;
    }

  if( regexStr )
    {
      regex = new RegexScan( regexStr, true );
      newMesg = false;
    }
  
  return( regex != 0 && regex->good() );
}

inline
streambuf *
LogBuf::delFilter( FilterId id )
{
  sync();
  streambuf * dest = 0;
  if( id < (long)filters.size() && filters[id].dest != 0 )
    {
      dest = filters[id].dest;
      filters[id].dest = 0;
      if( filters[id].regex )
	delete filters[id].regex;
      filters[id].regex = 0;
    }
  return( dest );
}

inline
const char *
LogBuf::getLogFileName( void ) const
{
  if( is_file() )
    return( logFileName );
  else
    return( "" );
}

inline
bool
LogBuf::willOutput( LogLevel::Level lvl ) const
{
  if( logLevel.willOutput( lvl ) )
    return( true );

  for( FilterList::const_iterator them = filters.begin();
       them != filters.end();
       ++them )
    {
      if( ! (*them).dest )
	continue;

      if( (*them).outputLevel & lvl )
	return( true );
    }

  return( false );
}

inline
LogBuf::Filter::Filter( void )
  : dest(0), outputLevel( LogLevel::None ), regex( 0 )
{
};

inline
LogBuf::Filter::Filter( const Filter & from )
  : dest( from.dest ), outputLevel( from.outputLevel )
{
  if( from.regex )
    regex = new RegexScan( *from.regex );
}
      
inline
LogBuf::Filter::~Filter( void )
{
  if( regex ) delete regex;
};

inline
LogBuf::Filter &
LogBuf::Filter::operator = ( const Filter & rhs )
{
  dest = rhs.dest;
  outputLevel = rhs.outputLevel;
  if( regex ) delete regex;
  regex = new RegexScan( *regex );
  return( *this );
}
      

#if defined( inline )
#undef inline
#endif

//
// Revision Log:
//
// $Log$
// Revision 3.4  1997/04/01 15:09:39  houghton
// Added willOutput method that also check if any filters will output.
//
// Revision 3.3  1997/03/03 19:02:05  houghton
// Added code for Filter default constructor.
// Added code for Filter copy constructor.
// Added code Filter destructor.
// Added code Filter operator =.
//
// Revision 3.2  1996/11/19 12:21:40  houghton
// Added getLogFileName method.
//
// Revision 3.1  1996/11/14 01:23:48  houghton
// Changed to Release 3
//
// Revision 2.5  1996/11/13 16:56:04  houghton
// Bug-Fix: tee() - added a call to sync so that only entries
//     added after the call to tee() will be written to the tee's
//     stream.
// Changed isFile() to is_file() to be more consistant with the
//     standard filebuf::is_open().
// Added is_open() to detect if there is a valid primary stream open.
// Changed filter() to accept a '0' which causes any existing
//     filter to be removed.
// Changed filter() - added a call to sync() so that
//     only entries put in the log after the call to fitler() will be
//     fitlered.
// Changed delFitler() - to return the streambuf that was given as
//     the filter's destination.
// Changed delFitler() - added a call to sync to flush any entries
//     in the buffer to the dest before it is removed.
//
// Revision 2.4  1996/11/04 14:07:07  houghton
// Restructure header comments layout.
// Reorder Constructor args and initalize varabiles.
// Removed willOutput method (can use getLogLevel().willOutput()).
// Added setCurrentLevel method to change the current level.
// Added setOutputLevel method to change the output level.
// Added getLogLevel method to provide const access to the LogLevel.
// Added filter method to support outputing only messages that
//     contain a regex.
// Added delFilter method to remove a destination filter that is no
//     longer needed.
//
// Revision 2.3  1996/04/27 13:03:35  houghton
// Bug-Fix: if inline gets defined at the top, it needs to be undef at
//   at the bottom.
//
// Revision 2.2  1995/12/04 11:17:24  houghton
// Bug Fix - Can now compile with out '-DCLUE_DEBUG'.
//
// Revision 2.1  1995/11/10  12:40:46  houghton
// Change to Version 2
//
// Revision 1.2  1995/11/05  14:44:38  houghton
// Ports and Version ID changes
//
//
#endif // ! def _LogBuf_ii_ 
