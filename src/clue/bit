#ifndef _clue_bit_ // -*- c++ -*-
// 1995-02-22 (cc) <paul4hough@gmail.com>
#define _clue_bit_

#include <cstddef>
#include <climits>

#if !defined( CHAR_ALL_BITS )

#define CHAR_BITS   CHAR_BIT
#define SHORT_BITS  ( sizeof(short) * CHAR_BITS)
#define INT_BITS    ( sizeof(int) * CHAR_BITS)
#define LONG_BITS   ( sizeof(long) * CHAR_BITS)


#define CHAR_ALL_BITS	((unsigned char)(~0))  // 0xff
#define SHORT_ALL_BITS	((unsigned short)(~0)) // 0xffff
#define LONG_ALL_BITS	((unsigned long)(~0L)) // 0xffffffff
#define INT_ALL_BITS	((unsigned int)(~0))   // 0xffff | 0xffffffff

#define Bit( _b_ ) ( 1 << _b_ )

namespace clue {

template< class T >
inline
size_t
BitSizeof( T value )
{
  return( sizeof( value ) * CHAR_BIT );
}

template< class T, class NumberType >
inline
T
StripHigh( T value, NumberType keepCount )
{
  return( ( ( ~0U ) >> ( BitSizeof( 0U ) - keepCount ) ) &
	   value );
}

template< class T, class NumberType >
inline
T
StripLow( T value, NumberType stripCount )
{
  return( ( (~((T)(0))) << stripCount ) & value );
}

template< class T, class NumberType >
inline
T
ShiftRight( T value, NumberType  start )
{
  return( value >> ( start % ( BitSizeof( value ) ) ) );
}

template< class T, class NumberType >
inline
T
ShiftLeft( T value, NumberType  start )
{
  return( value << ( BitSizeof( value ) -
		     ( (start + 1) % BitSizeof( value ) ) ) );
}

template< class T, class NumberType  >
inline
T
ShiftLeft( T value, NumberType start, NumberType len )
{
  return( ( value << ( BitSizeof( value ) -
                       ( ( start % BitSizeof( value ) ) + len ) ) ) );
}

template< class T, class NumberType >
inline
T
ExtractBits( T value, NumberType start, NumberType len )
{
  return( StripHigh( ShiftRight( value, start ), len ) );
}

template< class Dest, class Value, class NumberType >
inline
void
SetBits( Dest & dest, Value value, NumberType start, NumberType len )
{
  Dest result = StripHigh( value, len );
  result = ( result << start );


  result |= StripHigh( dest, start );
  result |= StripLow( dest, start + len );
  dest = result;
}

}; // namespace clue

#endif // ! def( CHAR_ALL_BITS )


/**
   Detail Documentation:

    Defines:

  	CHAR_BITS
  	    The number of bits in a 'char' (normally 8).

  	SHORT_BITS
  	    The number of bits in a 'short'.

  	INT_BITS
  	    The number of bits in a 'int'.

  	LONG_BITS
  	    The number of bits in a 'long'.

  	CHAR_ALL_BITS
  	    A 'char' with all bits set to 1.

  	SHORT_ALL_BITS
  	    A 'short' with all bits set to 1.

  	INT_ALL_BITS
  	    An 'int' with all bits set to 1.

  	LONG_ALL_BITS
  	    A 'long' with all bits set to 1.

    Macros:

  	Bit( n )
  	    A number with it's 'n' bit turned on. (i.e. Bit(0) == 00000001,
  	    Bit(3) == '000001000' ).

    Functions:

  	template< class T > inline
  	size_t
  	BitSizeof( T value )
  	    Return the number of bits in 'value'.

  	template< class T, class NumberType > inline
  	T
  	StripHigh( T value, NumberType keepCount )
  	    Returns value with it's high bits set to 0 without
  	    changing the first 'keepCount' bits.
  	    (i.e. StripHigh( '11111111', 3 ) == '00000111' ).

  	template< class T, class NumberType > inline
  	T
  	StripLow( T value, NumberType stripCount )
  	    Returns value with it's low 'stripCount' bits set to 0.
  	    (i.e. StripLow( '11111111', 3 ) == '11111000' ).

  	template< class T, class NumberType > inline
  	T
  	ShiftRight( T value, NumberType count )
  	    Returns value shifted right by count bits. This function
  	    is just like the '>>' operator except it does a modulo (%)
  	    on count using BitSizeof(T).
  	    (i.e. ShiftRight( char, 4 ) == ShiftRight( char, 20 ) ).

  	template< class T, class NumberType > inline
  	T
  	ShiftLeft( T value, NumberType start )
  	    Returns value shifted left so that bit 'start' is the leftmost
  	    bit. 'start' is right to left begining with 0 and
  	    is modulod with BitSize(T) to prevent overflow.
  	    (i.e. ShiftLeft( (char)(00110101), 4 ) == 10101000 ).

  	template< class T, class NumberType > inline
  	T
  	ShiftLeft( T value, NumberType start, NumberType len )
  	    Returns value shifted left so the bit at 'start' + 'len' is
  	    the leftmost bit. 'start' is right to left begining with 0 and
  	    is modulod with BitSize(T) to prevent overflow. 'len' is right to
  	    left begining with bit 'start'.
  	    (i.e. ShiftLeft( (char)'00101000', 3, 3 ) == '10100000').

  	template< class T, class NumberType > inline
  	T
  	ExtractBits( T value, NumberType start, NumberType len )
  	    Returns the value of the bits in 'value' from 'start' to 'len'.
  	    Where 'start' is right to left begining with a 0 and 'len'
  	    is right to left begining with start'.
  	    (i.e. ExtractBits( 00110100, 4, 3 ) == 00000011 and
  	    ExtractBits( 00110100, 3, 3 ) == 00000110 ).

  	template< class Dest, class T, class NumberType > inline
  	void
  	SetBits( Dest & dest, Value value, NubmerType start, NumberType len )
  	    Sets the bits in dest from start to len to the value specified
  	    by 'value'. Where 'start' is right to left begining with a 0
  	    and 'len' is right to left begining with start'.
  	    (i.e. dest = '11111111'; SetBits( dest, '01010', 1, 5 );
  	    dest == '11010101').


    Example:

  	StripHigh( 11111111, 3 ) == 00000111

  	StripLow( 11111111, 3 ) == 11111000

  	ShiftLeft( 00110101, 4 ) == 10101000

  	ShiftLeft( 00110100, 4, 3 ) == 01101000
  	ShiftLeft( 00110100, 3, 3 ) == 11010000
  	ShiftLeft( 011, 0, 3 ) == 01100000
  	ShiftLeft( 011, 3, 0 ) == 01100000

  	ExtractBits( 00110100, 4, 3 ) == 00000011
  	ExtractBits( 00110100, 3, 3 ) == 00000110

  	SetBits( dest, 3, 4, 3 ) == x011xxxx  (x means not modified)
  	SetBits( dest, 6, 3, 3 ) == xx110xxx  (x means not modified)

   See Also:

    Bitmask(3)

   Files:

    Bit.hh, Bit.ii


   Documented Ver: 2.3
   Tested Ver: 2.3
**/


#endif // ! def _clue_bit_
