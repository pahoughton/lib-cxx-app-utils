#ifndef _clue_compare_ // -*- c++ -*-
// 1995-05-01 <paul4hough@gmail.com>
#define _clue_compare_

#include <cstring>	// needed for strcmp calls

#if defined( Compare_SCMP_ ) || defined( Compare_PSCMP_ ) || defined( Compare_NCMP_ )

#error "Interal Compare macro already defined"

#else

namespace clue {

#define Compare_SCMP_( T1, T2 ) \
inline int compare( T1 a, T2 b) { return( strcmp( a, b ) ); }

#define Compare_PSCMP_( T1, T2 ) \
inline int compare( T1 a, T2 b ) { return( strcmp( *a, *b ) ); }

#define Compare_NCMP( T1 ) \
inline int compare( T1 a, T1 b ) { return( (a < b ) ? -1 : ( a == b ) ? 0 : 1 ); }


Compare_SCMP_( const char *, const char * );
Compare_SCMP_( const char *, char * );
Compare_SCMP_( char *, const char * );
Compare_SCMP_( char *, char * );

Compare_PSCMP_( const char * const * , const char * const * );
Compare_PSCMP_( const char * const * , const char * * );
Compare_PSCMP_( const char * const * , char * const * );
Compare_PSCMP_( const char * const * , char * * );
Compare_PSCMP_( const char * * , const char * const * );
Compare_PSCMP_( const char * * , const char * * );
Compare_PSCMP_( const char * * , char * const * );
Compare_PSCMP_( const char * * , char * * );
Compare_PSCMP_( char * const * , const char * const * );
Compare_PSCMP_( char * const * , const char * * );
Compare_PSCMP_( char * const * , char * const * );
Compare_PSCMP_( char * const * , char * * );
Compare_PSCMP_( char * * , const char * const * );
Compare_PSCMP_( char * * , const char * * );
Compare_PSCMP_( char * * , char * const * );
Compare_PSCMP_( char * * , char * * );

Compare_NCMP( char );
Compare_NCMP( unsigned char );
Compare_NCMP( short );
Compare_NCMP( unsigned short );
Compare_NCMP( int );
Compare_NCMP( unsigned int );
Compare_NCMP( long );
Compare_NCMP( unsigned long );
Compare_NCMP( long long );
Compare_NCMP( unsigned long long );
Compare_NCMP( float );
Compare_NCMP( double );

#if !defined( CLUE_SELF_COMPARE_IMPL )
#define CLUE_SELF_COMPARE_IMPL( SC_TYPE, SC_OPERATOR )		\
inline								\
bool								\
SC_TYPE::operator SC_OPERATOR ( const SC_TYPE & rhs ) const	\
{								\
  return( compare( rhs ) SC_OPERATOR 0 );			\
}
#endif


#undef Compare_SCMP_
#undef Compare_PSCMP_
#undef Compare_NCMP_

}

#endif // defined( Compare_SCMP_ ) ...

#endif // ! def _clue_compare_
